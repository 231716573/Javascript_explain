一、实现继承

function Animal(name){
  this.name = name;
  this.showName = function(){
    console.log(this.name);
  }
}
function Cat(name){
  Animal.call(this,name);
}
var cat = new Cat("black cat");
cat.showName(); //Black Cat


二、类数组

这里把符合以下条件的对象称为类数组
1.具有length属性
2.按索引方式存储数据
3.不具有数组的push,pop等方法

常见类数组有 arguments,NodeList!

1、Array.prototype.push 也可以实现两个数组合并

(function(){
  Array.prototype.push.call(arguments, 4);  
  console.log(arguments);//[1, 2, 3, 4]
})(1,2,3)


2、同样push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即:
var arr1=new Array("1","2","3"); 
var arr2=new Array("4","5","6"); 
Array.prototype.push.call(arr1,arr2);
console.log(arr1); //["1", "2", "3", "4", "5", "6"]

3、比如想求类数组中的最大值
// 字符串传递形式
(function (){
  var maxNum = Math.max.apply(null,arguments);
  console.log(maxNum); //56
})(34,2,56);

// 数组作为参数传递形式
var arr = new Array(1,34,73,14,15,5,3,7,2,4);
(function(a){
	var maxNum = Math.max.apply(null,a);
	console.log(maxNum)
})(arr);


三、判断类型

console.log(Object.prototype.toString.call(123)) //[object Number]
console.log(Object.prototype.toString.call('123')) //[object String]
console.log(Object.prototype.toString.call(undefined)) //[object Undefined]
console.log(Object.prototype.toString.call(true)) //[object Boolean]
console.log(Object.prototype.toString.call({})) //[object Object]
console.log(Object.prototype.toString.call([])) //[object Array]
console.log(Object.prototype.toString.call(function(){})) //[object Function]



四、方法绑定

var Bind = function(object, fun){
	var can = Array.prototype.slice.call(arguments).slice(2);
	return function(){
		return fun.apply(object,can.concat(Array.prototype.slice.call(arguments)));
	}
}
var obj = {};
function a(a,b,c){
	return a+b+c;
}
var result= Bind(obj,a,1,2,3);
console.log(result());//6
