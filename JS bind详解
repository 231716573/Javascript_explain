在改变被调用函数的上下文时，可以用call或apply方法，但如何重复使用会不方便
    因为每次都要把上下文对象作为参数传递，而且还会使代码变得不直观，针对这种情况，我们可以使用bind方法永久绑定函数的上下文

bind的语法如何下:
    func.bind(thisArg, arg1[, arg2[, ...]]);

其中func是待绑定函数，thisArg是改变上下文对象，arg1、arg2是绑定参数表。
bind方法返回值是上下文为thisArg的func。
例子：
  var someuser = {
    name: 'sai',
    func:function(){
      console.log(this.name);
    }
  }
  
  var foo = {
    name: 'xiaobo'
  }
  
  foo.func = someuser.func;
  foo.func(); //输出xiaobo
  
  foo.func1 = someuser.func.bind(someuser);
  foo.func1(); //输出sai
  
  func = someuser.func.bind(foo);
  func(); //输出 xiaobo
  
  func2 = func;
  func2(); //输出 xiaobo
  上面代码直接将foo.func 赋值为some.func，调用foo.func()时，this指针为foo，所以输出结果是 xiaobo。
  foo.func1使用了bind()方法，将someuser作为this指针绑定到someuser.func，调用foo.func1()时，this指针为someuser，所以输出为 sai
  全局函数func同样使用bind方法，将foo作为this指针绑定到someuser.func，调用func()时，this指针为foo，所以输出为 xiaobo
  而func2直接将绑定过的func赋值过来，与func行为完全相同。
 
使用bind绑定参数表：
  var person = {
     name: "sai",
     says: function(act, obj){
      console.log(this.name + " " + act + " " + obj);
     }
  }
  person.sats('love', 'xiaobo');  //输出 sai love xiaobo
  
  bobo = person.says.bind(person, 'love');
  bobo('you');  // 输出 sai love you
  
  xiaoxiao = person.says.bind(person);
  xiaoxiao('hate', 'you') // 输出 sai hate you
  
  bobo将this指针绑定到person，并将第一个参数绑定到love，之后在调用bobo的时候，只需要传入第三个参数。
  xiaoxiao将this指针绑定到person，之后在调用xiaoxiao的时候，需要传入第二、第三个参数。
  
理解bind：

  尽管bind很优美，但是有一些令人迷惑的地方，例如：
  var someruser ={
    name: 'sai',
    func: function(){
      console.log(this.name)
    }
  }
  var foo = {
    name: 'xiaobo'
  }
  func = someuser.func.bind(foo);
  func(); // 输出 xiaobo
  
  func2 = func.bind(someuser);
  func2(); // 输出 xiaobo
  全局函数func通过someuser.func.bind将this指针绑定到foo，调用func()输出了xiaobo。
  我们试图将func2赋值为已绑定的func重新通过bind将this指针绑定到someuser的结果，而调用func2时发现输出值扔是xiaobo
  这么就好奇了，为什么this指针还是停留在foo对象上呢？
  
  someuser.func.bind = function(self){
    return this.call(self)
  }
  假设上面函数是someuser.func 的 bind方法的实现，函数体内this指向的是someuser.func，因为函数也是对象，
  所以this.call(self)的作用是以self作为this的指针调用someuser.func
  
  
 
  
